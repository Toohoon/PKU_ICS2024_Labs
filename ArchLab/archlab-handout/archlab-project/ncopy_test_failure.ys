
            .pos 0
            irmovq stack, %rsp
            irmovq data_to_copy, %rdi
            irmovq data_dst, %rsi
            irmovq $1, %rdx

            call ncopy
            halt
            nop
            nop
            nop
            nop
            nop
        
        ################################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# 郑斗薰 2100094820
#
# Describe how and why you modified the baseline code.
#
#
#
#
#
#
#
#
#
################################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
################################################################################
# You can modify this portion
# Loop Header
	
	
	iaddq  $-8, %rdx            # len -= 8 加上IOPQ操作
	jl     det_next_index     # 看元素剩下的

Loop:	
    mrmovq (%rdi), %r8      # C 把src[i],src[i+1] 复制到寄存器上
	mrmovq 8(%rdi), %r9     # Copy src[i+1] to %r9
	rmmovq %r8, (%rsi)	    # 通过寄存器复制到 dst 上
	andq   %r8, %r8	        
	jle    Det_0		        # if(src[i]<=0)goTo Pos0
	iaddq  $1, %rax		    # count++, positive number otherwise

Det_0:	
	rmmovq %r9, 8(%rsi)     # 把src[i+1]复制到dst[i+1]上
	andq   %r9, %r9         
	jle    Det_1	        # 如果src第i+1的元素小于等于0 去Pos1
	iaddq  $1, %rax         # count++
    
Det_1: 
	mrmovq 16(%rdi), %r8   # 复制到寄存器上
	mrmovq 24(%rdi), %r9   # 
	rmmovq %r8, 16(%rsi)    # 通过寄存器复制到 dst 上
	andq   %r8, %r8         
	jle    Det_2             # 一样，判断
	iaddq  $1, %rax         # count++, positive number otherwise

Det_2: 
	rmmovq %r9, 24(%rsi)   #同样进行i+3的操作
	andq   %r9, %r9           
	jle    Det_3             
	iaddq  $1, %rax        
	
Det_3: 
	mrmovq 32(%rdi), %r8    #同样进行i+4的操作
	mrmovq 40(%rdi), %r9   
	rmmovq %r8, 32(%rsi)    
	andq   %r8, %r8         
	jle    Det_4          
	iaddq  $1, %rax        

Det_4: 
	rmmovq %r9, 40(%rsi)   #同样进行i+5的操作
	andq   %r9, %r9         
	jle    Det_5          
	iaddq  $1, %rax      
Det_5: 
	mrmovq 48(%rdi), %r8   #同样进行i+6的操作
	mrmovq 56(%rdi), %r9   
	rmmovq %r8, 48(%rsi)   
	andq   %r8, %r8         
	jle    Det_6           
	iaddq  $1, %rax        

Det_6: 
	rmmovq %r9, 56(%rsi)    #同样进行i+7的操作
	andq   %r9, %r9         
	jle    Det_part2        
	iaddq  $1, %rax         


Det_part2: 
	iaddq $64, %rdi         
	iaddq $64, %rsi         
	iaddq $-8, %rdx         
	jge   Loop              #返回循环

det_next_index:  
	iaddq $8, %rdx         

#下面的循环也是反复刚才所做的事情
Det_part2_0:
	iaddq  $-1, %rdx        
	jl     Done             
	mrmovq (%rdi), %r8   
	mrmovq 8(%rdi), %r9    
	rmmovq %r8, (%rsi)     
	andq   %r8, %r8         
	jle    Det_part2_1          
	iaddq  $1, %rax        
	
Det_part2_1: 
	iaddq  $-1, %rdx        
	jl     Done            
	rmmovq %r9, 8(%rsi)   
	andq   %r9, %r9       
	jle    Det_part2_2          
	iaddq  $1, %rax         

Det_part2_2: 
	iaddq  $-1, %rdx       
	jl     Done             
	mrmovq 16(%rdi), %r8   
	mrmovq 24(%rdi), %r9   
	rmmovq %r8, 16(%rsi)   
	andq   %r8, %r8       
	jle    Det_part2_3          
	iaddq  $1, %rax        

 Det_part2_3: 
	iaddq  $-1, %rdx        
	jl     Done	        
	rmmovq %r9, 24(%rsi)  
	andq   %r9, %r9      
	jle    Det_part2_4          
	iaddq  $1, %rax 

Det_part2_4 : 
	iaddq  $-1, %rdx        
	jl     Done            
	mrmovq 32(%rdi), %r8   
	mrmovq 40(%rdi), %r9   
	rmmovq %r8, 32(%rsi)   
	andq   %r8, %r8       
	jle    Det_part2_5           
	iaddq  $1, %rax         

Det_part2_5: 
	iaddq  $-1, %rdx       
	jl     Done	        
	rmmovq %r9, 40(%rsi)   
	andq   %r9, %r9      
	jle    Det_part2_6         
	iaddq  $1, %rax 

Det_part2_6: 
	iaddq  $-1, %rdx       
	jl     Done            
	mrmovq 48(%rdi), %r8  
	rmmovq %r8, 48(%rsi)   
	andq   %r8, %r8       
	jle    Done             
	iaddq  $1, %rax
Done:
	ret
# In grader, we will add a "trap: jmp trap" here, which traps your program in an
# infinite loop. Thus your function should always return instead of falling
# through till the end of the source code :)

        # do not fall through to the end of the source!
        # Otherwise you will encounter this trap :)
        trapititit: jmp trapititit

            .pos 0x1000 # source code + stack limits to 4kb
            .align 8
        stack:
        data_to_copy:
            .quad 0x53175d61490b23df
        data_dst:
        