	.pos 0
	irmovq	stack,%rsp
	call main
	halt

	.align 8
array:
	.quad 0xbca
	.quad 0xcba
	.quad 0xacb
	.quad 0xcab
	.quad 0xabc
	.quad 0xbac
	
################################################################################
# You may want to modify this portion

#bubble_sort(long *data, long count)
bubble_sort:
		#pushq %r8	
		#pushq %r9
		#pushq %r10
		#pushq %r11
		#pushq %r12
		rrmovq %rsi, %r8 
		irmovq $1, %r9	
		subq %r9, %r8	
		jmp check_return
loopBegin:
		xorq %rax, %rax	#initialize rax to 0

Loop_det:
		rrmovq %rax, %r10	
		subq %r8, %r10		
		jl Loop		
		subq %r9, %r8
check_return:
		jg loopBegin	
		#popq %r8
		#popq %r9
		#popq %r10
		#popq %r11
		#popq %r12
		ret	
Det_check:
		addq %r9, %rax
		jmp Loop_det

Loop:
		rrmovq %rdi, %r12	
		irmovq $8, %r10		
		rrmovq %rax, %rcx	
		
		conditionCheck:
				subq %r9, %rcx	
				jl sort			
				addq %r10, %r12	
				jmp conditionCheck	
				sort: 
					mrmovq (%r12), %rdx	
					rrmovq %r12, %rsi	
					addq %r10, %rsi		
					mrmovq (%rsi), %rcx	
					rrmovq %rcx, %r10	
					subq %rdx, %r10		
					jge Det_check			
					rmmovq %rdx, (%rsi)
					rmmovq %rcx, (%r12)
		
		
main:
		irmovq array, %rdi	#array as parameter rdi
		irmovq $6, %rsi	#Count = 6 as parameter rsi
		call bubble_sort #call bubble_sort
		ret


		.pos 0x200
stack: